<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>UnchainedPay ‚Äî Swap / Bridge / Pay</title>

<!-- Ethers v6 -->
<script src="https://cdn.jsdelivr.net/npm/ethers@6.13.4/dist/ethers.umd.min.js"></script>
<!-- Lightweight Charts (CDN) -->
<script defer src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
<style>
  :root{ --bg:#f5f7fb; --card:#fff; --text:#0b1324; --muted:#6b7280; --primary:#16a34a; --border:#e5e7eb; --chip:#f1f5f9; --chart-bg:#0b0f14 }
  *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto}
  .wrap{max-width:980px;margin:18px auto;padding:0 14px}
  .topbar{display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brandbox{display:flex;align-items:center;gap:12px}
  .logo{width:28px;height:28px;border-radius:8px;background:#12a150;color:#fff;display:flex;align-items:center;justify-content:center;font-weight:900}
  .brand{font-size:22px;font-weight:900}
  .mm-btn{background:#2563eb;border:1px solid #1d4ed8;color:#fff;padding:8px 12px;border-radius:10px;font-weight:800;cursor:pointer}
  .mm-btn:disabled{opacity:.7;cursor:not-allowed}
  .tabs{display:flex;gap:22px;border-bottom:1px solid var(--border);margin:12px 0 18px}
  .tab{padding:12px 0;color:#111827;opacity:.8;font-weight:700;cursor:pointer}
  .tab.active{opacity:1;border-bottom:2px solid var(--text)}
  .tab:hover{opacity:1}
  .card{background:var(--card);border:1px solid var(--border);border-radius:16px;padding:18px;box-shadow:0 8px 30px rgba(16,24,40,.06);margin-bottom:16px}
  .title{font-size:26px;font-weight:900;margin:0 0 14px}
  .pills{display:grid;grid-template-columns:1fr auto 1fr;gap:10px;margin-bottom:12px}
  .pill{display:flex;align-items:center;gap:10px;background:var(--chip);border:1px solid var(--border);border-radius:14px;padding:10px 14px;font-weight:700}
  .arrow{display:flex;align-items:center;justify-content:center;width:40px}
  .select{appearance:none;border:none;background:transparent;font-weight:800;cursor:pointer;width:100%}
  .select:focus{outline:none}
  .token-ico{width:24px;height:24px;border-radius:999px;background:#e2f6ea;display:flex;align-items:center;justify-content:center;font-size:12px;font-weight:900;color:#0f7e36}
  .amount input{width:100%;height:46px;border-radius:12px;border:1px solid var(--border);padding:0 12px;font-size:18px}
  .cta{display:block;width:100%;height:50px;margin:14px 0;background:var(--primary);border:1px solid #0f7e36;color:#fff;border-radius:12px;font-weight:900;font-size:20px;cursor:pointer}
  .cta:disabled{opacity:.6;cursor:not-allowed}
  .row{display:grid;grid-template-columns:1fr 260px;gap:14px;margin:10px 0}
  .stats{display:grid;grid-template-columns:1fr 1fr;gap:8px;align-content:start}
  .k{color:var(--muted)} .v{font-weight:900}
  .statline{display:flex;gap:6px}
  .mini-chart{border:1px solid var(--border);border-radius:12px;overflow:hidden;height:140px;background:var(--chart-bg);position:relative}
  .mini-chart iframe{width:100%;height:100%;border:0;display:block;background:var(--chart-bg)}
  .quote{margin-top:12px;border-top:1px solid var(--border);padding-top:12px}
  .quote-row{display:grid;grid-template-columns:1fr auto 1fr;gap:8px;align-items:center}
  .tag{background:#eef2ff;border:1px solid #dbe1ff;border-radius:12px;padding:10px 12px;font-weight:800}
  .ago{color:#6b7280;text-align:right;margin-top:6px}
  .wallet-grid{display:flex;align-items:center;gap:14px;flex-wrap:wrap}
  .btn{background:#11182710;border:1px solid var(--border);border-radius:12px;padding:10px 14px;font-weight:800;cursor:pointer}
  .btn:hover{filter:brightness(0.98)}
  .muted{color:var(--muted)}
  .token-list{margin-top:10px;border-top:1px dashed var(--border);padding-top:10px}
  .token-item{display:flex;justify-content:space-between;padding:8px 10px;border:1px solid var(--border);border-radius:10px;margin-bottom:8px;background:#fafbff}
  .slip-row{display:flex;gap:10px;align-items:center;margin-top:10px}
  .slip-row label{font-weight:800;color:#374151}
  .slip{appearance:none;border:1px solid var(--border);background:var(--chip);border-radius:10px;padding:8px 10px;font-weight:800;cursor:pointer}
  @media (max-width:900px){ .row{grid-template-columns:1fr} .mini-chart{height:120px} .pills{grid-template-columns:1fr 40px 1fr} }
  .mini-chart.lc-on iframe{display:none}
  .mini-chart .lc{position:absolute;inset:0;width:100%;height:100%}
</style>



<div class="wrap">
  <div class="topbar">
    <div class="brandbox"><div class="logo">UP</div><div class="brand">UnchainedPay</div></div>
    <button id="btnMM" class="mm-btn">ü¶ä Connect MetaMask</button>
  </div>

  <div class="tabs">
    <div class="tab active" data-tab="swap">Swap &amp; Pay</div>
    <div class="tab" data-tab="wallet">Wallet</div>
    <div class="tab" data-tab="bridge">Bridge</div>
    <div class="tab" data-tab="fast">Fast Withdraw</div>
    <div class="tab" data-tab="cfg">Config</div>
  </div>

  <!-- SWAP -->
  <div id="swap" class="card">
    <h2 class="title">Swap</h2>
    <div class="pills">
      <div class="pill"><div class="token-ico">‚óè</div><select id="fromSelect" class="select"></select></div>
      <div class="arrow">‚Üî</div>
      <div class="pill"><div class="token-ico">‚óè</div><select id="toSelect" class="select"></select></div>
    </div>
    <div class="amount"><input id="amount" placeholder="1000" inputmode="decimal"></div>

    <div class="slip-row">
      <label for="slippageSelect">Slippage:</label>
      <select id="slippageSelect" class="slip">
        <option value="0.5">0.5%</option>
        <option value="1">1%</option>
        <option value="3" selected="">3%</option>
        <option value="5">5%</option>
        <option value="nolimit">Illimit√©</option>
      </select>
      <span id="slipInfo" class="muted"></span>
    </div>

    <button id="btnSwap" class="cta" disabled="">Swap</button>

    <!-- FROM -->
    <div class="row">
      <div class="stats">
        <div class="statline"><span class="k">Price:</span>&nbsp;<span id="fromPrice" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Market Cap:</span>&nbsp;<span id="fromMC" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">24h Volume:</span>&nbsp;<span id="fromVol" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Œî 24h:</span>&nbsp;<span id="fromChange" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Supply (circ/total):</span>&nbsp;<span id="fromSupply" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Holders:</span>&nbsp;<span id="fromHolders" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Top Pool Liq:</span>&nbsp;<span id="fromLiq" class="v">‚Äî</span></div>
      </div>
      <div class="mini-chart"><iframe id="fromFrame" allow="clipboard-write; fullscreen"></iframe></div>
    </div>

    <!-- TO -->
    <div class="row">
      <div class="stats">
        <div class="statline"><span class="k">Price:</span>&nbsp;<span id="toPrice" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Market Cap:</span>&nbsp;<span id="toMC" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">24h Volume:</span>&nbsp;<span id="toVol" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Œî 24h:</span>&nbsp;<span id="toChange" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Supply (circ/total):</span>&nbsp;<span id="toSupply" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Holders:</span>&nbsp;<span id="toHolders" class="v">‚Äî</span></div>
        <div class="statline"><span class="k">Top Pool Liq:</span>&nbsp;<span id="toLiq" class="v">‚Äî</span></div>
      </div>
      <div class="mini-chart"><iframe id="toFrame" allow="clipboard-write; fullscreen"></iframe></div>
    </div>

    <div class="quote">
      <div class="quote-row">
        <div class="tag" id="payTag">Swap</div>
        <div style="text-align:center;font-weight:900" id="arrowMid">‚Üí</div>
        <div class="tag" id="getTag">‚Äî</div>
      </div>
      <div class="ago" id="agoLabel">‚Äî</div>
    </div>
  </div>

  <!-- WALLET -->
  <div id="wallet" class="card" style="display:none">
    <h2 class="title">My Wallet</h2>
    <div class="wallet-grid">
      <div><span class="k">Address:</span> <span id="walletAddr" class="v">‚Äî</span></div>
      <button id="btnSwitch" class="btn">Switch to Pepe Unchained V2</button>
      <button id="btnLoadTokens" class="btn">Load my tokens</button>
      <span id="walletStatus" class="muted"></span>
    </div>
    <div id="walletTokens" class="token-list"></div>
  </div>

  <div id="bridge" class="card" style="display:none"><div class="title" style="font-size:22px">Bridge</div><div class="k">To be connected server-side.</div></div>
  <div id="fast" class="card" style="display:none"><div class="title" style="font-size:22px">Fast Withdraw</div><div class="k">Automatic fallback.</div></div>
  <div id="cfg" class="card" style="display:none"><div class="title" style="font-size:22px">Config</div><div class="k">UI powered by your Cloudflare Worker (tokens + markets + wallet).</div></div>
</div>

<script>
/* =============== CONFIG =============== */
const API_BASE  = "https://unchainedpay-api.u5763870533.workers.dev"; // source d'origine
const GECKO_NET = "pepe-unchained";
const EXPLORER_URL = "https://explorer-pepu-v2-mainnet-0.t.conduit.xyz";
const USE_WORKER = !!API_BASE;

// Cache local pour la liste des tokens (5 minutes)
const TOK_CACHE_KEY = "unchainedpay_tokens_cache_v2";
const TOK_TTL_MS    = 5 * 60 * 1000;

/* Pepe Unchained V2 */
const PEPU_V2 = {
  chainIdDec: 97741,
  get chainId(){ return "0x" + this.chainIdDec.toString(16).toUpperCase(); },
  chainName: "Pepe Unchained V2",
  rpcUrls: ["https://rpc-pepu-v2-mainnet-0.t.conduit.xyz"],
  nativeCurrency: { name:"PEPU", symbol:"PEPU", decimals:18 },
  blockExplorerUrls: ["https://explorer-pepu-v2-mainnet-0.t.conduit.xyz"]
};

/* =============== HELPERS =============== */
const $ = (id)=>document.getElementById(id);
const api = (p, opt={}) => fetch((API_BASE||"")+p, opt).then(r=>r.json());
const isAddr = a => /^0x[0-9a-fA-F]{40}$/.test((a||"").trim());
const fmtUSD = n => (n==null||isNaN(n)) ? "‚Äî" : "$ "+Number(n).toLocaleString(undefined,{maximumFractionDigits:6});
const fmtNum = (n,d=6) => (n==null||isNaN(n)) ? "‚Äî" : Number(n).toLocaleString(undefined,{maximumFractionDigits:d});

/* =============== STATE =============== */
const state = { tokens:[], meta:{}, market:{}, supply:{}, holders:{}, pools:{}, from:null, to:null, lastQuoteAt:0, mm:null, address:"", estOut:0 };

/* =============== TABS =============== */
document.querySelectorAll(".tab").forEach(btn=>{
  btn.addEventListener("click", ()=>{
    document.querySelectorAll(".tab").forEach(t=>t.classList.remove("active"));
    btn.classList.add("active");
    ["swap","wallet","bridge","fast","cfg"].forEach(id=>{
      document.getElementById(id).style.display = (btn.dataset.tab===id) ? "block":"none";
    });
  });
});

/* =================== AUTONOME: helpers pour fallback =================== */
async function geckoTrendingTokens(){
  const url = `https://api.geckoterminal.com/api/v2/networks/${GECKO_NET}/trending_pools?include=base_token,quote_token`;
  const r = await fetch(url, { headers:{ accept:"application/json" } });
  if (!r.ok) return [];
  const j = await r.json();
  const pools = Array.isArray(j?.data) ? j.data : [];
  const map = new Map();
  for (const p of pools){
    const a = p?.attributes || {};
    const add = (addr, sym, name)=>{
      if (/^0x[0-9a-fA-F]{40}$/.test(addr||"")) {
        const k = addr.toLowerCase();
        if (!map.has(k)) map.set(k, { address:k, symbol:sym||"TKN", name:name||sym||"Token" });
      }
    };
    add(a.base_token_address,  a.base_token_symbol,  a.base_token_name);
    add(a.quote_token_address, a.quote_token_symbol, a.quote_token_name);
  }
  return Array.from(map.values()).slice(0, 100);
}
async function localTokensFallback(){
  try{
    const r = await fetch("./tokens.json", { headers:{ accept:"application/json" } });
    if (!r.ok) return [];
    const arr = await r.json();
    return (Array.isArray(arr)?arr:[])
      .filter(x => isAddr(x?.address))
      .map(x => ({ address:x.address.toLowerCase(), symbol:x.symbol||"TKN", name:x.name||x.symbol||"Token" }));
  }catch{ return []; }
}

/* =============== SWAP =============== */
function fillSelect(sel, items){
  sel.innerHTML = "";
  for(const t of items){
    const o=document.createElement("option");
    o.value=t.address.toLowerCase();
    o.textContent=`${t.name||t.symbol||t.address}${t.symbol?` (${t.symbol})`:""}`;
    sel.appendChild(o);
    state.meta[o.value]={address:t.address,name:t.name||"Token",symbol:t.symbol||"TKN"};
  }
}

/* ======= LISTE TOKENS avec CACHE (5 min) ======= */
async function loadTokens(){
  try{
    let items = [];

    // A) Lecture du cache local (si frais)
    let cached = null;
    try { cached = JSON.parse(localStorage.getItem(TOK_CACHE_KEY) || "null"); } catch {}
    if (cached && Array.isArray(cached.items) && (Date.now() - cached.ts) < TOK_TTL_MS) {
      items = cached.items;

      // Remplit l‚ÄôUI imm√©diatement
      state.tokens = items;
      fillSelect($("fromSelect"), items);
      fillSelect($("toSelect"), items);
      if (items[0]) onSelect("from", items[0].address);
      if (items[1]) onSelect("to",   items[1].address);

      // Rafra√Æchissement discret si le cache est √† plus de mi-vie
      if ((Date.now() - cached.ts) > TOK_TTL_MS/2) {
        refreshTokensInBg().catch(()=>{});
      }
      return;
    }

    // B) Flux normal (Worker d‚Äôorigine puis fallbacks autonomes)
    // 1) Worker /tokens/discover
    try{
      const res = await fetch(`${API_BASE}/tokens/discover?limit=100&page=1`, { headers:{ accept:"application/json" } });
      const raw = await res.text();
      try {
        const j = JSON.parse(raw);
        items = Array.isArray(j?.items) ? j.items : [];
      } catch {}
    }catch{}

    // 2) (optionnel) /tokens si whitelist Worker
    if (!items.length && API_BASE) {
      try{
        const r2 = await fetch(`${API_BASE}/tokens`, { headers:{ accept:"application/json" } });
        if (r2.ok){
          const arr = await r2.json();
          items = (Array.isArray(arr)?arr:[])
            .filter(x => isAddr(x?.address||""))
            .map(x => ({ address:x.address.toLowerCase(), symbol:x.symbol||"TKN", name:x.name||x.symbol||"Token" }));
        }
      }catch{}
    }

    // 3) GeckoTerminal
    if (!items.length) {
      try { items = await geckoTrendingTokens(); } catch {}
    }

    // 4) tokens.json local
    if (!items.length) {
      items = await localTokensFallback();
    }

    if (!items.length) throw new Error("Aucun token d√©tect√©");

    // Remplissage UI + √©criture cache
    state.tokens=items; fillSelect($("fromSelect"),items); fillSelect($("toSelect"),items);
    if(items[0]) onSelect("from",items[0].address);
    if(items[1]) onSelect("to",items[1].address);

    try { localStorage.setItem(TOK_CACHE_KEY, JSON.stringify({ ts: Date.now(), items })); } catch {}
  }catch(e){
    console.error(e);
    alert("Impossible de charger la liste des tokens");
  }
}

// Rafra√Æchissement discret du cache (ne casse pas l‚ÄôUI si vide)
async function refreshTokensInBg(){
  const res = await fetch(`${API_BASE}/tokens/discover?limit=100&page=1`, { headers:{ accept:"application/json" } });
  const raw = await res.text();
  let items = [];
  try {
    const j = JSON.parse(raw);
    items = Array.isArray(j?.items) ? j.items : [];
  } catch {}
  if (items.length) {
    try { localStorage.setItem(TOK_CACHE_KEY, JSON.stringify({ ts: Date.now(), items })); } catch {}
  }
}

async function fetchExtras(address){
  if (USE_WORKER) {
    const [sup, hold, pools] = await Promise.all([
      api(`/supply/${address}`).catch(()=>({})),
      api(`/holders/${address}`).catch(()=>({})),
      api(`/pools/${address}`).catch(()=>({ pools: [] }))
    ]);
    state.supply[address] = sup || {};
    state.holders[address] = (hold && hold.holders!=null) ? hold.holders : null;
    state.pools[address] = Array.isArray(pools?.pools) ? pools.pools : [];
  } else {
    state.supply[address] = {};
    state.holders[address] = null;
    state.pools[address] = [];
  }
}
async function loadMarket(address){
  if (USE_WORKER) {
    try{
      const d=await api(`/market/${address}`);const a=d?.data?.attributes||{};
      const change=(a.price_percent_change_24h!=null)?(Number(a.price_percent_change_24h).toFixed(2)+" %"):"‚Äî";
      return{price:a.price_usd!=null?Number(a.price_usd):null,mc:a.market_cap_usd!=null?Number(a.market_cap_usd):(a.fdv_usd!=null?Number(a.fdv_usd):null),vol:a.volume_usd_24h!=null?Number(a.volume_usd_24h):null,change};
    }catch{return{price:null,mc:null,vol:null,change:"‚Äî"}}
  } else {
    return { price:null, mc:null, vol:null, change:"‚Äî" };
  }
}
function setChart(side,address){
  const url=`https://www.geckoterminal.com/${GECKO_NET}/tokens/${address}?embed=1&theme=dark&info=0&swaps=0&interval=1h`;
  if(side==="from") $("fromFrame").src=url; else $("toFrame").src=url;
}
async function applyExtras(side,address){
  const sup = state.supply[address]||{};
  const circ = sup.supplyCirc!=null ? fmtNum(sup.supplyCirc, 2) : "‚Äî";
  const total = sup.supplyTotal!=null ? fmtNum(sup.supplyTotal, 2) : "‚Äî";
  const holders = state.holders[address]!=null ? state.holders[address].toLocaleString() : "‚Äî";
  const pools = state.pools[address]||[];
  const topLiq = pools[0]?.liq!=null ? fmtUSD(pools[0].liq) : "‚Äî";
  if(side==="from"){ $("fromSupply").textContent = `${circ} / ${total}`; $("fromHolders").textContent = holders; $("fromLiq").textContent = topLiq; }
  else { $("toSupply").textContent = `${circ} / ${total}`; $("toHolders").textContent = holders; $("toLiq").textContent = topLiq; }
}
async function onSelect(side,address){
  const addr=(address||"").toLowerCase(); if(!isAddr(addr)) return;
  const [mk] = await Promise.all([ loadMarket(addr), fetchExtras(addr) ]);
  state.market[addr]=mk;
  if(side==="from"){
    state.from=addr; $("fromSelect").value=addr;
    $("fromPrice").textContent=fmtUSD(mk.price);
    $("fromMC").textContent=fmtUSD(mk.mc);
    $("fromVol").textContent=fmtUSD(mk.vol);
    $("fromChange").textContent=mk.change; setChart("from",addr); applyExtras("from",addr);
  }else{
    state.to=addr; $("toSelect").value=addr;
    $("toPrice").textContent=fmtUSD(mk.price);
    $("toMC").textContent=fmtUSD(mk.mc);
    $("toVol").textContent=fmtUSD(mk.vol);
    $("toChange").textContent=mk.change; setChart("to",addr); applyExtras("to",addr);
  }
  computeQuote();
}
function computeQuote(){
  const amt=parseFloat($("amount").value||"0"),from=state.from,to=state.to;
  if(!amt||!from||!to){$("btnSwap").disabled=true;setQuote("‚Äî","‚Äî");$("slipInfo").textContent="";return;}
  const pFrom=state.market[from]?.price||0,pTo=state.market[to]?.price||0;
  if(!pFrom||!pTo){$("btnSwap").disabled=true;setQuote("‚Äî","‚Äî");$("slipInfo").textContent="";return;}
  const usd=amt*pFrom,out=usd/pTo,fromSym=state.meta[from]?.symbol||"",toSym=state.meta[to]?.symbol||"";
  state.estOut = out;
  setQuote(`${fmtNum(amt)} ${fromSym}`,`${fmtNum(out)} ${toSym}`);
  $("btnSwap").disabled=false;state.lastQuoteAt=Date.now();updateAgo();
  const slipVal = $("slippageSelect").value;
  if(slipVal==="nolimit"){ $("slipInfo").textContent = "Tol√©rance : illimit√©e"; }
  else { $("slipInfo").textContent = `Tol√©rance : ${slipVal}% (~ minOut ‚âà ${fmtNum(out*(1-Number(slipVal)/100))} ${toSym})`; }
}
function setQuote(pay,get){$("payTag").textContent=pay;$("getTag").textContent=get;}
function updateAgo(){if(!state.lastQuoteAt){$("agoLabel").textContent="‚Äî";return;}const secs=Math.max(1,Math.floor((Date.now()-state.lastQuoteAt)/1000));const txt=secs<60?`${secs}s ago`:secs<3600?`${Math.floor(secs/60)} min ago`:`${Math.floor(secs/3600)} h ago`;$("agoLabel").textContent=txt;}
$("fromSelect").onchange=e=>onSelect("from",e.target.value);
$("toSelect").onchange  =e=>onSelect("to",e.target.value);
$("amount").addEventListener("input",computeQuote);
$("slippageSelect").addEventListener("change",computeQuote);

/* =============== METAMASK =============== */
async function connectMM(){
  const mm=(window.ethereum?.providers||[]).find(p=>p.isMetaMask)||(window.ethereum?.isMetaMask?window.ethereum:null);
  if(!mm){ alert("MetaMask not found. Open this page in MetaMask mobile or install the extension."); throw new Error("No MetaMask"); }
  state.mm = mm;
  await mm.request({ method:"eth_requestAccounts" });
  const provider = new ethers.BrowserProvider(mm);
  const signer = await provider.getSigner();
  state.address = await signer.getAddress();
  $("walletAddr").textContent = state.address;
  $("btnMM").textContent="‚úÖ Connected"; $("btnMM").disabled=true;
  return { mm, provider, signer };
}
$("btnMM").addEventListener("click", async ()=>{ try{ await connectMM(); }catch(e){ alert(e?.message||String(e)); }});

/* Switch network */
async function switchToPepuV2(){
  try{
    if(!state.mm) await connectMM();
    await state.mm.request({ method:"wallet_switchEthereumChain", params:[{ chainId: PEPU_V2.chainId }] });
    $("walletStatus").textContent = "‚úÖ Pepe Unchained V2 selected.";
  }catch(err){
    if(err && err.code === 4902){
      try{
        await state.mm.request({ method:"wallet_addEthereumChain", params:[{ chainId: PEPU_V2.chainId, chainName: PEPU_V2.chainName, rpcUrls: PEPU_V2.rpcUrls, nativeCurrency: PEPU_V2.nativeCurrency, blockExplorerUrls: PEPU_V2.blockExplorerUrls }] });
        $("walletStatus").textContent = "‚úÖ Network added and selected.";
      }catch(e2){ $("walletStatus").textContent = "‚ö†Ô∏è " + (e2?.message || String(e2)); }
    }else{ $("walletStatus").textContent = "‚ö†Ô∏è " + (err?.message || String(err)); }
  }
}
$("btnSwitch").addEventListener("click", switchToPepuV2);

/* =============== WALLET (inchang√©) =============== */
function formatUnitsSafe(balance, decimals){ try{ return Number(ethers.formatUnits(BigInt(balance), Math.max(0, Number(decimals||0)))); }catch{ return 0; } }
async function loadWalletTokens(){
  try{
    if(!state.address) await connectMM();
    $("walletStatus").textContent = "Loading tokens‚Ä¶";

    if (USE_WORKER) {
      let res = await fetch(`${API_BASE}/wallet/${state.address}`, { headers:{ "Accept":"application/json" } });
      if(!res.ok) res = await fetch(`${API_BASE}/wallet?address=${state.address}`, { headers:{ "Accept":"application/json" } });
      const raw = await res.text();
      let data; try { data = JSON.parse(raw); } catch {
        $("walletStatus").textContent = `‚ö†Ô∏è Non-JSON response (HTTP ${res.status}).`;
        $("walletTokens").innerHTML = `<div class="muted" style="word-break:break-all;white-space:pre-wrap">${raw.slice(0,2000)}</div>`;
        return;
      }
      const list = Array.isArray(data?.items) ? data.items : [];
      renderWalletList(list);
      return;
    }

    // Fallback explorer direct
    let items = [];
    try{
      const r = await fetch(`${EXPLORER_URL}/api?module=account&action=tokenlist&address=${state.address}`, { headers:{ accept:"application/json" } });
      if (r.ok){
        const j = await r.json();
        const arr = Array.isArray(j?.result) ? j.result : [];
        items = arr.map(t=>({
          address: (t.contractAddress||t.contract||"").toLowerCase(),
          name: t.name || "Token",
          symbol: t.symbol || "TKN",
          decimals: Number(t.decimals ?? 18),
          balance: String(t.balance ?? "0")
        })).filter(x=>isAddr(x.address));
      }
    }catch{}

    if (!items.length){
      const r2 = await fetch(`${EXPLORER_URL}/api/v2/addresses/${state.address}/tokens?type=ERC-20&limit=200`, { headers:{ accept:"application/json" } });
      if (r2.ok){
        const j2 = await r2.json();
        const arr = Array.isArray(j2?.items) ? j2.items : [];
        items = arr.map(it=>{
          const t = it?.token || it;
          return {
            address: (t?.address||t?.contract_address||"").toLowerCase(),
            name: t?.name || "Token",
            symbol: t?.symbol || "TKN",
            decimals: Number(t?.decimals ?? 18),
            balance: String(it?.value ?? it?.balance ?? "0")
          };
        }).filter(x=>isAddr(x.address));
      }
    }

    renderWalletList(items);
  }catch(e){ $("walletStatus").textContent = "‚ö†Ô∏è " + (e?.message || String(e)); }
}
function renderWalletList(list){
  const box  = $("walletTokens"); box.innerHTML = "";
  if(!list.length){ $("walletStatus").textContent = "No tokens found on this network."; return; }
  for(const t of list){
    const human = formatUnitsSafe(t.balance ?? "0", t.decimals ?? 18);
    const el = document.createElement("div");
    el.className = "token-item";
    el.innerHTML = `<span>${t.name || t.symbol || t.address}${t.symbol?` (${t.symbol})`:""}</span><span>${human.toLocaleString(undefined,{maximumFractionDigits:6})}</span>`;
    box.appendChild(el);
  }
  $("walletStatus").textContent = "‚úÖ Tokens loaded";
}
$("btnLoadTokens").addEventListener("click", loadWalletTokens);

/* =============== GUARD (inchang√©) =============== */
const GUARD_ADDRESS = "0x53859FAe789c92dceB8c9aF61b13e458C4313fe7";
const GUARD_ABI = ["function swapViaGuard(address tokenIn,address tokenOut,uint256 amountIn,uint256 minOut,address recipient,bool convertNow) external returns (uint256)"];
const ERC20_ABI = ["function decimals() view returns (uint8)","function allowance(address,address) view returns (uint256)","function approve(address,uint256) external returns (bool)"];

async function doSwapViaGuard(){
  try{
    $("btnSwap").disabled = true;
    const { provider, signer } = await connectMM();
    await switchToPepuV2();

    const tokenIn  = ($("fromSelect").value||"").trim();
    const tokenOut = ($("toSelect").value||"").trim();
    const amountStr = ($("amount").value||"").trim();
    const slipVal = $("slippageSelect").value;

    if(!isAddr(tokenIn))   throw new Error("Invalid input token.");
    if(!isAddr(tokenOut))  throw new Error("Invalid output token.");
    if(!amountStr || Number(amountStr)<=0) throw new Error("Amount missing.");
    if(!isAddr(GUARD_ADDRESS)) throw new Error("Guard address not set.");

    const me = state.address;
    const tIn  = new ethers.Contract(tokenIn, ERC20_ABI, signer);
    const dIn  = await tIn.decimals();
    const amountIn = ethers.parseUnits(amountStr, dIn);

    const allowance = await tIn.allowance(me, GUARD_ADDRESS);
    if (allowance < amountIn) { const txA = await tIn.approve(GUARD_ADDRESS, amountIn); await txA.wait(); }

    let minOut = 0n;
    if (slipVal !== "nolimit") {
      const dOut = await (new ethers.Contract(tokenOut, ERC20_ABI, signer)).decimals();
      const estOut = Number(state.estOut || 0);
      const factor = Math.max(0, 1 - Number(slipVal)/100);
      const minOutHuman = estOut * factor;
      minOut = (isFinite(minOutHuman) && minOutHuman>0)
        ? ethers.parseUnits(minOutHuman.toString(), dOut)
        : 0n;
    }

    const guard = new ethers.Contract(GUARD_ADDRESS, GUARD_ABI, signer);
    const tx = await guard.swapViaGuard(tokenIn, tokenOut, amountIn, minOut, me, false);
    await tx.wait();

    alert("‚úÖ Swap ex√©cut√© via Guard (slippage appliqu√©).");
  }catch(e){ console.error(e); alert("‚ö†Ô∏è " + (e?.reason || e?.message || String(e))); }
  finally{ $("btnSwap").disabled = false; computeQuote(); }
}
$("btnSwap").addEventListener("click", doSwapViaGuard);

/* =============== BOOT =============== */
loadTokens(); setInterval(updateAgo,1000);
</script>

<!-- LightweightCharts: n‚Äô√©teint l‚Äôiframe que si le Worker fournit /ohlcv -->
<script>
window.USE_LIGHT_CHART = true;
(function(){
  if (!window.USE_LIGHT_CHART) return;
  var _origSetChart = window.setChart; if (!_origSetChart) return;
  function waitForLib(cb){ if (window.LightweightCharts) return cb(); var start = Date.now(); (function loop(){ if (window.LightweightCharts) return cb(); if (Date.now() - start > 20000) return; setTimeout(loop, 50); })(); }
  function drawInto(box, line){ var mount = box.querySelector(".lc"); if (!mount){ mount = document.createElement("div"); mount.className = "lc"; box.appendChild(mount); } mount.innerHTML = ""; var chart = LightweightCharts.createChart(mount, { autoSize: true, layout: { background: { type: 'solid', color: 'transparent' }, textColor: '#eaeaea' }, grid: { horzLines: { color: '#1d1f22' }, vertLines: { color: '#1d1f22' } }, handleScroll: { mouseWheel:true, pressedMouseMove:true, horzTouchDrag:true, vertTouchDrag:true }, handleScale: { pinch:true, mouseWheel:true } }); var series = chart.addLineSeries({ lineWidth:2, priceLineVisible:false }); series.setData(line); box.classList.add("lc-on"); }
  window.setChart = function(side, address){
    _origSetChart(side, address);
    if (!USE_WORKER) return; // en mode autonome, on laisse l'iframe Gecko
    var frame = (side === "from") ? document.getElementById("fromFrame") : document.getElementById("toFrame");
    var box = frame && frame.closest(".mini-chart"); if (!frame || !box) return;
    var interval = "1h"; var base = (typeof API_BASE !== "undefined" && API_BASE) ? API_BASE : ""; if (!base) return;
    var key  = "lc_" + address + "_" + interval;
    try{ var raw = sessionStorage.getItem(key); if (raw){ var o = JSON.parse(raw); if (o && o.exp > Date.now() && Array.isArray(o.data) && o.data.length){ waitForLib(function(){ if (!window.LightweightCharts) return; drawInto(box, o.data); }); } } }catch(_){}
    fetch(base + "/ohlcv/" + address + "?interval=" + interval + "&limit=600", { headers:{ accept:"application/json" } })
      .then(function(r){ return r.ok ? r.json() : Promise.reject(new Error("HTTP "+r.status)); })
      .then(function(j){ var arr  = Array.isArray(j && j.candles) ? j.candles : []; var line = arr.map(function(x){ return { time:x[0], value:x[4] }; }); if (!line.length) return; waitForLib(function(){ if (!window.LightweightCharts) return; drawInto(box, line); try{ sessionStorage.setItem(key, JSON.stringify({ exp: Date.now()+60*1000, data: line })); }catch(_){}}); })
      .catch(function(){ /* leave iframe on error */ });
  };
})();
</script>